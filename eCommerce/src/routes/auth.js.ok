import { Router } from 'express'

import authController from '../controllers/auth.js'

const authRouter = new Router()

/**** PASSPORT (poner donde corresponde) ***/

import cfg from '../config.js'
import bCrypt from 'bcrypt'
import session from 'express-session'
import passport from 'passport'
import passportLocal from 'passport-local'
import MongoStore from 'connect-mongo'
const LocalStrategy = passportLocal.Strategy

// sessions
authRouter.use(session({
    store: MongoStore.create({
        mongoUrl: cfg.db.cnxStr,
        mongoOptions: cfg.db.options
    }),
    secret: cfg.auth.secret,
    resave: false,
    saveUninitialized: false,
    rolling: true, // para refrescar el ttl cada vez que se interactúa con la sesión
    cookie: {
        maxAge: cfg.auth.expire*1000   // msec. Esto puede obviarse y la cookie toma la duración de la sesión
                          // si este está seteado, hace un override del ttl de la sesión
    }
}))

authRouter.use(passport.initialize())
authRouter.use(passport.session())

import UsersDao from '../daos/UsersMongoDB.js'
const Users = UsersDao.getInstance()

passport.use(
    'login',
    new LocalStrategy((username, password, done) => {
        return Users.getByUsername(username)
        .then(user => {
            if (!user) {
                return done(null, false, { message: 'Nombre de usuario incorrecto' })
            }
            if (!isValidPassword(user.password, password)) {
                return done(null, false, { message: 'Contraseña incorrecta' })
            }
            passport.username = user.username
            return done(null, user)
        })
        .catch(err => {
            logger.error(`services.auth.login: ${err}`)
            done(err)
        })
    }
))

passport.serializeUser((user, done) => {
    done(null, user.id)
})
   
passport.deserializeUser((id, done) => {
    Users.getById(id)
    .then(user => {
        return done(null, user)
    })
    .catch(err => {
        logger.error(`services.auth.deserializeUser: ${err}`)
        return done(err)
    })
})

const isValidPassword = (userPassword, password) => {
    return bCrypt.compareSync(password, userPassword)
}

/**** PASSPORT HASTA AQUI ***/

authRouter
    .post('/register', authController.register)
    .post('/login', authController.login)
    .post('/web/login',
        passport.authenticate(
            'login',
            {
                successRedirect: '/chat',
                failureRedirect: '/loginerror.html',
                failureFlash: false
            }
        )
    )

export default authRouter